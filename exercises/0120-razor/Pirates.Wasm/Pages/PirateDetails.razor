@page "/pirate/{id?}"
@inject HttpClient Client
@inject NavigationManager NavigationManager

<h1 class="display-4">@(Id != null ? "Edit" : "Create") Pirate</h1>

<EditForm Model="@Pirate" OnValidSubmit="@OnPost">
	<DataAnnotationsValidator />
    <div class="text-danger"> 
		<ValidationSummary  />
	</div>
	<div class="mb-3">
		<label for="Name" class="form-label">Name</label>
		<InputText @bind-Value="this.Pirate.Name" class="form-control" id="Name"/>
	</div>
	<div class="mb-3">
		<label for="RealName" class="form-label">Real Name</label>
		<InputText @bind-Value="this.Pirate.RealName" class="form-control" id="RealName"/>
	</div>
	<div class="mb-3">
		<label for="YearOfBirth" class="form-label">Year of Birth</label>
		<InputNumber @bind-Value="this.Pirate.YearOfBirth" class="form-control" id="YearOfBirth"/>
	</div>
	<div class="mb-3">
		<label for="YearOfDeath" class="form-label">Year of Death</label>
		<InputNumber @bind-Value="this.Pirate.YearOfDeath" class="form-control" id="YearOfDeath"/>
	</div>
	<div class="mb-3">
		<label for="CountryOfOrigin" class="form-label">Country of Origin</label>
		<InputText @bind-Value="this.Pirate.CountryOfOrigin" class="form-control" id="CountryOfOrigin"/>
	</div>
	<button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@code {
	[Parameter]
	public string? Id { get; set; }

    protected override async Task OnInitializedAsync()
	{
		this.Pirate = new Pirate();
		if (Id != null && Guid.TryParse(Id, out var id))
		{
			var dbPirate = await Client.GetFromJsonAsync<Pirate>($"/api/pirates/{Id}");
			if (dbPirate != null) Pirate = dbPirate;
		}
	}

	public Pirate Pirate { get; set; } = new();

	public async Task OnPost()
	{
		if (Id != null)
		{
			// We have not implemented update in the API
		}
		else
		{
			await Client.PostAsJsonAsync("/api/pirates", Pirate);
		}

		NavigationManager.NavigateTo("");
	}
}
